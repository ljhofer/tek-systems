 
use mock_sba_db;

-- query 1
-- Create a query to return all orders made by users with the first name of “Marion”

select *
from orders;


select o.ORDER_ID, o.USER_ID, o.STORE_ID 
from orders as o
join users as u on o.USER_ID = u.USER_ID 
where u.FIRST_NAME='Marion'
;


-- query 2
-- Create a query to select all users that have not made an order 
select * 
from users
where USER_ID not in (
select USER_ID from orders
)
;


-- query 3
-- Create a Query to select the names and prices of all items that have been part of 2 or more separate orders. 
select i.NAME, i.PRICE 
from items as i
join order_items as oi on oi.ITEM_ID = i.ITEM_ID
group by oi.ITEM_ID
having COUNT(oi.ORDER_ID) >=2
;


-- query 4
-- Create a query to return the Order Id, Item name, Item Price, and Quantity from orders made at stores in the city “New York”. 
-- Order by Order Id in ascending order.
select o.ORDER_ID as `Order ID`, i.NAME as `Item Name`, i.PRICE as `Item Price`, oi.QUANTITY as `Quantity` 
from orders as o 
join order_items as oi on o.ORDER_ID = oi.ORDER_ID 
join items as i on oi.ITEM_ID = i.ITEM_ID 
join stores as s on o.STORE_ID = s.STORE_ID 
where s.city='New York'
order by o.ORDER_ID 
;

-- query 5 
-- Your boss would like you to create a query that calculates the total revenue generated by each item. 
-- Revenue for an item can be found as (Item Price * Total Quantity Ordered). 
-- Please return the first column as ‘ITEM_NAME’ and the second column as ‘REVENUE’. 

select i.name as `ITEM_NAME`, SUM(i.price*oi.QUANTITY) as `REVENUE`
from order_items as oi
join items as i on oi.ITEM_ID = i.ITEM_ID 
group by `ITEM_NAME`
order by `Revenue` desc
;


-- query 6 
-- Create a query with the following output: 
-- a. Column 1 - Store Name 
--  i. The name of each store 
-- b. Column 2 - Order Quantity 
--  i. The number of times an order has been made in this store 
-- c. Column 3 - Sales Figure 
--  i. If the store has been involved in more than 3 orders, mark as ‘High’ 
--  ii. If the store has been involved in less than 3 orders but more than 1 order, mark as ‘Medium’ 
--  iii. If the store has been involved with 1 or less orders, mark as ‘Low’ 
-- d. Should be ordered by the Order Quantity in Descending Order

select s.name as `Store Name`, COUNT(o.ORDER_ID) as `Order Quantity`,
case 
	when COUNT(o.ORDER_ID)>=3 then 'High'
	when COUNT(o.ORDER_ID)=2 then 'Medium'
	when COUNT(o.ORDER_ID)<=1 then 'Low'
end as `Sales Figures`
from stores as s
join orders as o on s.STORE_ID = o.STORE_ID 
group by `Store Name`
order by `Order Quantity` desc
;

